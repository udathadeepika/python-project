import tkinter as tk
from tkinter import filedialog, messagebox
import subprocess
import os

class PythonIDLE:
    def __init__(self, root):
        self.root = root
        self.root.title("Python IDLE")
        self.root.geometry("800x600")

        self.create_widgets()
        self.create_menu()

    def create_widgets(self):
        # Create a Text widget for the code editor
        self.editor = tk.Text(self.root, wrap='none', undo=True)
        self.editor.pack(fill='both', expand=True, side='left')

        # Create a scrollbar for the editor
        self.scrollbar = tk.Scrollbar(self.editor)
        self.editor.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.editor.yview)
        self.scrollbar.pack(side='right', fill='y')

        # Create a Text widget for the output
        self.output = tk.Text(self.root, wrap='none', height=10, bg='black', fg='white')
        self.output.pack(fill='both', expand=True, side='bottom')

    def create_menu(self):
        # Create a menu bar
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)

        # Create File menu
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="New", command=self.new_file)
        self.file_menu.add_command(label="Open", command=self.open_file)
        self.file_menu.add_command(label="Save", command=self.save_file)
        self.file_menu.add_command(label="Save As", command=self.save_file_as)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", command=self.root.quit)

        # Create Run menu
        self.run_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Run", menu=self.run_menu)
        self.run_menu.add_command(label="Run", command=self.run_code)

    def new_file(self):
        self.editor.delete(1.0, tk.END)

    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Python Files", "*.py")])
        if file_path:
            with open(file_path, "r") as file:
                code = file.read()
                self.editor.delete(1.0, tk.END)
                self.editor.insert(tk.END, code)
            self.root.title(f"Python IDLE - {os.path.basename(file_path)}")

    def save_file(self):
        if hasattr(self, 'file_path') and self.file_path:
            with open(self.file_path, "w") as file:
                code = self.editor.get(1.0, tk.END)
                file.write(code)
        else:
            self.save_file_as()

    def save_file_as(self):
        self.file_path = filedialog.asksaveasfilename(defaultextension=".py", filetypes=[("Python Files", "*.py")])
        if self.file_path:
            with open(self.file_path, "w") as file:
                code = self.editor.get(1.0, tk.END)
                file.write(code)
            self.root.title(f"Python IDLE - {os.path.basename(self.file_path)}")

    def run_code(self):
        code = self.editor.get(1.0, tk.END)
        with open("temp_code.py", "w") as temp_file:
            temp_file.write(code)

        process = subprocess.Popen(["python", "temp_code.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()

        self.output.delete(1.0, tk.END)
        if output:
            self.output.insert(tk.END, output.decode("utf-8"))
        if error:
            self.output.insert(tk.END, error.decode("utf-8"))

        os.remove("temp_code.py")

if __name__ == "__main__":
    root = tk.Tk()
    app = PythonIDLE(root)
    root.mainloop()
